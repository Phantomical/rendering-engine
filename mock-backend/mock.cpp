/*
    This file was generated by mock-gen.py as part of the project build.

	This file is part of rendering-engine.
	
	rendering-engine is free software : you can redistribute it and / or modify
	it under the terms of the GNU Lesser General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	rendering-engine is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
	GNU Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public License
	along with rendering-engine. If not, see <http://www.gnu.org/licenses/>.
*/

#include "interface.h"

#define CALL_CONV GLDR_BACKEND_CALL_CONV
#ifdef _WIN32
#define EXPORT __declspec(dllexport)
#else
#define EXPORT
#endif

using namespace gldr;

__declspec(dllexport) size_t create_buffer_called = 0;
__declspec(dllexport) size_t create_shader_called = 0;
__declspec(dllexport) size_t create_texture_2d_called = 0;
__declspec(dllexport) size_t create_texture_3d_called = 0;
__declspec(dllexport) size_t create_texture_cubemap_called = 0;
__declspec(dllexport) size_t create_render_target_called = 0;
__declspec(dllexport) size_t create_mesh_called = 0;
__declspec(dllexport) size_t delete_buffer_called = 0;
__declspec(dllexport) size_t delete_shader_called = 0;
__declspec(dllexport) size_t delete_texture_called = 0;
__declspec(dllexport) size_t delete_render_target_called = 0;
__declspec(dllexport) size_t delete_mesh_called = 0;
__declspec(dllexport) size_t set_buffer_data_called = 0;
__declspec(dllexport) size_t swap_buffers_called = 0;
__declspec(dllexport) size_t sync_called = 0;

extern "C" void EXPORT CALL_CONV _create_buffer(buffer_handle* _retval)
{
	create_buffer_called++;
}
extern "C" void EXPORT CALL_CONV _create_shader(shader_handle* _retval)
{
	create_shader_called++;
}
extern "C" void EXPORT CALL_CONV _create_texture_2d(texture_handle* _retval)
{
	create_texture_2d_called++;
}
extern "C" void EXPORT CALL_CONV _create_texture_3d(texture_handle* _retval)
{
	create_texture_3d_called++;
}
extern "C" void EXPORT CALL_CONV _create_texture_cubemap(texture_handle* _retval)
{
	create_texture_cubemap_called++;
}
extern "C" void EXPORT CALL_CONV _create_render_target(render_target_handle* _retval)
{
	create_render_target_called++;
}
extern "C" void EXPORT CALL_CONV _create_mesh(mesh_handle* _retval)
{
	create_mesh_called++;
}
extern "C" void EXPORT CALL_CONV _delete_buffer(buffer_handle arg0)
{
	delete_buffer_called++;
}
extern "C" void EXPORT CALL_CONV _delete_shader(shader_handle arg0)
{
	delete_shader_called++;
}
extern "C" void EXPORT CALL_CONV _delete_texture(texture_handle arg0)
{
	delete_texture_called++;
}
extern "C" void EXPORT CALL_CONV _delete_render_target(render_target_handle arg0)
{
	delete_render_target_called++;
}
extern "C" void EXPORT CALL_CONV _delete_mesh(mesh_handle arg0)
{
	delete_mesh_called++;
}
extern "C" void EXPORT CALL_CONV _set_buffer_data(buffer_handle arg0, size_t arg1, const void* arg2)
{
	set_buffer_data_called++;
}
extern "C" void EXPORT CALL_CONV _swap_buffers()
{
	swap_buffers_called++;
}
extern "C" void EXPORT CALL_CONV _sync()
{
	sync_called++;
}

extern "C" void EXPORT CALL_CONV _init() { }
extern "C" void EXPORT CALL_CONV _terminate() { }
